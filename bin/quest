#!/usr/bin/env ruby

begin
  require 'quest'
  require 'gli'
  require 'net/http'
  require 'json'
  require 'gettext-setup'
rescue
  require 'rubygems'
  require 'quest'
  require 'gli'
  require 'json'
  require 'gettext-setup'
end

module GLIWrapper
  include GLI::App
  extend self
  GettextSetup.initialize(File.expand_path('../locales', File.dirname(__FILE__)))
  GettextSetup.negotiate_locale!(GettextSetup.candidate_locales)

  BASE_URI = URI('http://localhost:4567/')
  OFFER_BAILOUT = false

  def get_path(*path)
    begin
      Net::HTTP.get(URI.join(BASE_URI, *path))
    rescue Errno::ECONNREFUSED => e
      puts _("You may need to restart the quest service:") + " systemctl restart quest" 
      raise e
    end
  end

  def post_path(form_data, *path)
    begin
      req = Net::HTTP::Post.new(URI.join(BASE_URI, *path), form_data)
      req.set_form_data(form_data)
      res = Net::HTTP.start(BASE_URI.hostname, BASE_URI.port, :read_timeout => 1000) do |http|
        http.request(req)
      end 
    rescue Errno::ECONNREFUSED => e
      puts _("You may need to restart the quest service:") + " systemctl restart quest"
      raise e
    end
  end

  def offer_bailout(message)
    print message + _("Continue?") + "[Y/n]:"
    raise _("Cancelled") unless [ 'y', 'yes', ''].include? STDIN.gets.strip.downcase
  end

  def fancy_status
    active_quest = get_path('active_quest')
    output = _("Quest: ") + "#{active_quest}\n"
    examples = JSON.parse(get_path('status/', 'examples'))
    examples.each do |example|
      if example["status"] == "passed"
        output << 'âˆš '.green
      else
        output << 'X '.yellow
      end
      output << example["full_description"] + "\n"
    end
    output
  end

  def summary_status
    active_quest = get_path('active_quest')
    output = _("Quest: %{active_quest} - Progress: ") % {active_quest: active_quest}
    summary = JSON.parse(get_path('status/', 'summary'))
    complete_count = summary["example_count"].to_i - summary["failure_count"].to_i
    output << _('%{complete} of %{total} tasks.') % {complete: complete_count.to_s, total: summary['example_count'].to_s}
  end

  # TODO: Consider replacing with https://github.com/randrews/spinner
  def wait_spinner
    chars = %w[| / - \\]
    iter = 0
    spinner = Thread.new do
      while iter do
        print chars[(iter+=1) % chars.length]
        sleep 0.5
        print "\b"
      end
    end
    yield.tap{
      iter = false
      spinner.join
    }
  end

  program_desc _('Track the status of quests and tasks.')

  desc _('Begin a quest')
  arg :quest_name
  arg_name 'quest_name'
  command :begin do |c|
    c.action do |global_options, options, args|
      if args.length < 1
        raise _('You must specify a quest name. Refer to the Quest Guide or use the "quest list" command.')
      elsif not JSON.parse(get_path('quests')).include? args[0]
        raise _('%{quest} is not a valid quest name. Refer to the Quest Guide or use the "quest list" command.') % {quest: args[0]}
      elsif OFFER_BAILOUT and not get_path('status/', 'summary/', 'failure_count') == '0'
        offer_bailout(_("The current quest is not complete. If you begin a new quest, your agent nodes will be reset. Your master node and Puppet code will not be affected.\n"))
      end
      puts _("Please wait a moment while the %{quest} quest is set up...") % {quest: args[0]}
      wait_spinner do
        post_path({}, 'begin/', args[0])
      end
      puts _("You have started the %{quest} quest.") % {quest: args[0]}
    end
  end

  desc _('List available quests')
  command :list do |c|
    c.action do |global_options, options, args|
      puts JSON.parse(get_path('quests'))
    end
  end

  desc _('Show status of the current quest')
  command :status do |c|
    c.switch [:s], :desc => _('Show status in summary form.')
    c.action do |global_options, options, args|
      if options[:s]
        puts summary_status 
      else
        puts fancy_status
      end
    end
  end

  exit run(ARGV)
end
